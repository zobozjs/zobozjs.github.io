"use strict";(self.webpackChunkzobozjs_website=self.webpackChunkzobozjs_website||[]).push([[9268],{1184:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>c});var o=n(4041);const i={},r=o.createContext(i);function t(e){const s=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(r.Provider,{value:s},e.children)}},3386:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"learn/avoid-pkg-imports","title":"avoid-pkg-imports","description":"If your package supports TypeScript declaration files (.d.ts), ES modules (.mjs/.js), and CommonJS (.cjs), using the imports field in package.json can create unnecessary complexity and compatibility issues.","source":"@site/docs/learn/avoid-pkg-imports.md","sourceDirName":"learn","slug":"/learn/avoid-pkg-imports","permalink":"/docs/learn/avoid-pkg-imports","draft":false,"unlisted":false,"editUrl":"https://github.com/zobozjs/zoboz/tree/main/packages/zobozjs-website/docs/learn/avoid-pkg-imports.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"avoid-pkg-imports","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/learn/intro"},"next":{"title":"avoid-pkg-type","permalink":"/docs/learn/avoid-pkg-type"}}');var i=n(1085),r=n(1184);const t={title:"avoid-pkg-imports",sidebar_position:2},c="Why You Should Avoid the imports Field in package.json",d={},l=[{value:"Why Is It Problematic?",id:"why-is-it-problematic",level:2},{value:"1. <strong>Limited Support Across Environments</strong>",id:"1-limited-support-across-environments",level:3},{value:"2. <strong>Confuses the System During Development</strong>",id:"2-confuses-the-system-during-development",level:3},{value:"3. <strong>Complicates TypeScript Resolution</strong>",id:"3-complicates-typescript-resolution",level:3},{value:"4. <strong>Unnecessary When Using Proper <code>exports</code> Configuration</strong>",id:"4-unnecessary-when-using-proper-exports-configuration",level:3},{value:"Recommended Approach",id:"recommended-approach",level:2},{value:"Use <code>tsconfig.json</code> for Development Resolution",id:"use-tsconfigjson-for-development-resolution",level:3}];function p(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsxs)(s.h1,{id:"why-you-should-avoid-the-imports-field-in-packagejson",children:["Why You Should Avoid the ",(0,i.jsx)(s.code,{children:"imports"})," Field in ",(0,i.jsx)(s.code,{children:"package.json"})]})}),"\n",(0,i.jsxs)(s.p,{children:["If your package supports TypeScript declaration files (",(0,i.jsx)(s.code,{children:".d.ts"}),"), ES modules (",(0,i.jsx)(s.code,{children:".mjs"}),"/",(0,i.jsx)(s.code,{children:".js"}),"), and CommonJS (",(0,i.jsx)(s.code,{children:".cjs"}),"), using the ",(0,i.jsx)(s.code,{children:"imports"})," field in ",(0,i.jsx)(s.code,{children:"package.json"})," can create unnecessary complexity and compatibility issues."]}),"\n",(0,i.jsx)(s.h2,{id:"why-is-it-problematic",children:"Why Is It Problematic?"}),"\n",(0,i.jsxs)(s.h3,{id:"1-limited-support-across-environments",children:["1. ",(0,i.jsx)(s.strong,{children:"Limited Support Across Environments"})]}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"imports"})," field is not universally supported by all bundlers, runtimes, and TypeScript configurations. Some tools may ignore it, leading to unexpected module resolution issues."]}),"\n",(0,i.jsxs)(s.h3,{id:"2-confuses-the-system-during-development",children:["2. ",(0,i.jsx)(s.strong,{children:"Confuses the System During Development"})]}),"\n",(0,i.jsxs)(s.p,{children:["When your package is in development, builds may not exist yet, but the ",(0,i.jsx)(s.code,{children:"imports"})," field still affects module resolution. This can cause issues where tools expect a structure that isn\u2019t there, leading to unnecessary errors. If your development setup relies on ",(0,i.jsx)(s.code,{children:"tsconfig.paths"}),", symlinks, or aliases, the behavior may differ from what happens in production, making debugging more difficult."]}),"\n",(0,i.jsxs)(s.h3,{id:"3-complicates-typescript-resolution",children:["3. ",(0,i.jsx)(s.strong,{children:"Complicates TypeScript Resolution"})]}),"\n",(0,i.jsxs)(s.p,{children:["TypeScript does not automatically respect ",(0,i.jsx)(s.code,{children:"imports"})," in the same way it handles ",(0,i.jsx)(s.code,{children:"paths"})," in ",(0,i.jsx)(s.code,{children:"tsconfig.json"}),". This means that TypeScript users may experience incorrect type resolution or missing types when using your package."]}),"\n",(0,i.jsxs)(s.h3,{id:"4-unnecessary-when-using-proper-exports-configuration",children:["4. ",(0,i.jsxs)(s.strong,{children:["Unnecessary When Using Proper ",(0,i.jsx)(s.code,{children:"exports"})," Configuration"]})]}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"exports"})," field already provides a structured way to expose modules for both CommonJS and ESM consumers. When configured correctly, ",(0,i.jsx)(s.code,{children:"exports"})," ensures compatibility across all environments without needing ",(0,i.jsx)(s.code,{children:"imports"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"recommended-approach",children:"Recommended Approach"}),"\n",(0,i.jsxs)(s.h3,{id:"use-tsconfigjson-for-development-resolution",children:["Use ",(0,i.jsx)(s.code,{children:"tsconfig.json"})," for Development Resolution"]}),"\n",(0,i.jsxs)(s.p,{children:["Instead of relying on ",(0,i.jsx)(s.code,{children:"imports"}),", configure ",(0,i.jsx)(s.code,{children:"tsconfig.json"})," to properly resolve module paths during development:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "baseUrl": "./",\n    "paths": {\n      "your-package": ["./src/index.ts"],\n      "your-package/*": ["./src/*"]\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(s.p,{children:["This allows TypeScript and tools like VSCode to resolve imports correctly without needing ",(0,i.jsx)(s.code,{children:"imports"})," in ",(0,i.jsx)(s.code,{children:"package.json"}),". The build process will then correctly generate ",(0,i.jsx)(s.code,{children:"exports"})," for production."]}),"\n",(0,i.jsxs)(s.p,{children:["To maximize compatibility while supporting TypeScript, ES modules, and CommonJS, avoid ",(0,i.jsx)(s.code,{children:"imports"})," and use ",(0,i.jsx)(s.code,{children:"exports"})," like this:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n  "name": "your-package",\n  "exports": {\n    "import": "./dist/esm/index.js",\n    "require": "./dist/cjs/index.js",\n    "types": "./dist/index.d.ts"\n  },\n  "main": "./dist/cjs/index.js",\n  "module": "./dist/esm/index.js",\n  "types": "./dist/index.d.ts"\n}\n'})}),"\n",(0,i.jsx)(s.p,{children:"This setup ensures:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["ES modules use ",(0,i.jsx)(s.code,{children:"import"})," with the correct ",(0,i.jsx)(s.code,{children:".js"})," file."]}),"\n",(0,i.jsxs)(s.li,{children:["CommonJS uses ",(0,i.jsx)(s.code,{children:"require"})," with the correct ",(0,i.jsx)(s.code,{children:".js"})," file."]}),"\n",(0,i.jsxs)(s.li,{children:["TypeScript finds the correct ",(0,i.jsx)(s.code,{children:".d.ts"})," file for typings."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["By relying on ",(0,i.jsx)(s.code,{children:"exports"})," instead of ",(0,i.jsx)(s.code,{children:"imports"}),", you provide a clear, predictable, and widely supported module structure without introducing resolution conflicts."]})]})}function a(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);